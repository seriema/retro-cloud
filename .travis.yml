version: ~> 1.0 # Opt in to beta Build Config Validation https://docs.travis-ci.com/user/build-config-validation#beta-opt-in
language: shell # "Setting the language key to bash, sh or shell is equivalent to language: minimal." (https://docs.travis-ci.com/user/languages/minimal-and-generic/#aliases)
os: linux
dist: xenial

services:
- docker

env:
  global:
  - CONTAINER_NAME="Build-$TRAVIS_BUILD_NUMBER"

#
# I would prefer to have bashValidation, imageValidation, and scriptValidation running in parallel
# as they are not blocking and builds take long enough, but I haven't found a good way in Travis
# that also is visually easy to follow in the web interface. Having everything regarding
# scriptValidation in one job hides every step inside a giant console log which is impossible to
# track down what step went wrong.
#

# This is in global context and runs for every stage that doesn't override it.
before_install:
# Create .env
- echo "AZURE_TENANT_ID=$AZURE_TENANT_ID" | tee -a .env
- echo "AZURE_SERVICE_PRINCIPAL_USER=$AZURE_SERVICE_PRINCIPAL_USER" | tee -a .env
- echo "AZURE_SERVICE_PRINCIPAL_SECRET=$AZURE_SERVICE_PRINCIPAL_SECRET" | tee -a .env
- echo "SCREENSCRAPER_USER=$SCREENSCRAPER_USER" | tee -a .env
- echo "SCREENSCRAPER_KEY=$SCREENSCRAPER_KEY" | tee -a .env

# I won't be stopping the container. I need to learn more about Travis to know when it would be a
# good time (after everything is run, even if steps failed), but it also adds time to my build.
# Seems pointless as Travis will shut down the VM that's running the container anyway.

jobs:
  include:
  #############################################################################
    # - stage: "Pre-checks"
    # # Workflow: bashValidation
    # # This must weirdly not have a dash, otherwise an empty job is created
    #   script:
    #   - ./lint.sh
    #   name: "bashValidation"

    # # Workflow: imageValidation
    # - script:
    #   # Start Docker
    #   # Start validation
    #   - ./docker/test.sh 'latest-amd64' 'seriema/retro-cloud'
    #   name: "imageValidation"


  #############################################################################
    - stage: "Run everything"
    # Workflow: scriptValidation
    # This must weirdly not have a dash, otherwise an empty job is created
      script:
      # Convenience scripts for Travis fold. Based on these scripts:
      # * https://github.com/spotify/ios-ci/blob/master/bin/travis_fold
      # * https://www.koszek.com/blog/2016/07/25/dealing-with-large-jobs-on-travis/
      - |
        TMP=/tmp/.travis_fold_name

        travis_fold() {
          local action=$1
          local name=$2
          echo -en "travis_fold:${action}:${name}\r"
        }

        travis_fold_start() {
          local name=$1
          local heading=$2
          travis_fold start "$name"
          echo -en "\033[0K${heading}\n"
          echo -n "$name" > "$TMP"
        }

        travis_fold_end() {
          travis_fold end "$(cat "${TMP}")"
        }

      # Start Docker
      - travis_fold_start START_DOCKER "Start Docker"
      - docker pull seriema/retro-cloud:latest-amd64
      - docker container create --cap-add SYS_ADMIN --device /dev/fuse --env-file .env --interactive --rm --tty --name "$CONTAINER_NAME" --workdir /home/pi seriema/retro-cloud:latest-amd64
      - docker container start "$CONTAINER_NAME"
      - travis_fold_end

      # Start validation
      # name: Install Retro-Cloud on RaspberryPi (Setup Azure resources)
      # - |
      #   docker exec "$CONTAINER_NAME" /bin/bash -c "
      #     curl -fOL 'https://raw.githubusercontent.com/seriema/retro-cloud/${TRAVIS_COMMIT}/raspberry-pi/download-and-run.sh' \
      #     && bash download-and-run.sh $TRAVIS_COMMIT $CONTAINER_NAME \
      #     && rm download-and-run.sh"

      # name: Install Retro-Cloud on VM
    #   - docker exec "$CONTAINER_NAME" /bin/bash -c "bash -i setup-vm.sh $TRAVIS_COMMIT"

    #   # name: Copy a freeware ROM to VM
    #   - docker exec "$CONTAINER_NAME" /bin/bash -c 'bash -i ssh-vm.sh "bash -i retro-cloud-setup/dev/test-copy-rom.sh"'

    #   # name: Add Screenscraper.fr credentials to VM
    #   - docker exec "$CONTAINER_NAME" /bin/bash -c "./add-scraper-credential.sh screenscraper '$SCREENSCRAPER_USER' '$SCREENSCRAPER_KEY'"

    #   # name: Run scraper on VM
    #   - docker exec "$CONTAINER_NAME" /bin/bash -c 'bash -i run-scraper.sh'

    #   # name: Verify that ROM shows up in Azure File Share
    #   - docker exec "$CONTAINER_NAME" /bin/bash -c 'bash -i -c 'pwsh -executionpolicy bypass -File "./retro-cloud-setup/dev/test-az-share.ps1"'

    #   # name: Verify scraper output on VM
    #   - docker exec "$CONTAINER_NAME" /bin/bash -c 'bash -i ssh-vm.sh "bash -i retro-cloud-setup/dev/test-gamelist.sh"'

    # # - after_script:
    #   # name: Print RaspberryPi ~/.retro-cloud.env
    #   - docker exec "$CONTAINER_NAME" /bin/bash -c 'cat ~/.retro-cloud.env'
    #   # when: always

    #   # name: Print VM ~/.retro-cloud.env
    #   - docker exec "$CONTAINER_NAME" /bin/bash -c 'bash -i ssh-vm.sh \'cat "$HOME/.retro-cloud.env"\''
    #   # when: always

    #   # name: Print RaspberryPi ~/.bashrc
    #   - docker exec "$CONTAINER_NAME" /bin/bash -c 'cat ~/.bashrc'
    #   # when: always

    #   # name: Print VM ~/.bashrc
    #   - docker exec "$CONTAINER_NAME" /bin/bash -c 'bash -i ssh-vm.sh \'cat "$HOME/.bashrc"\''
    #   # when: always

    #   # name: Print RaspberryPi ~/ directory listing
    #   - docker exec "$CONTAINER_NAME" /bin/bash -c 'bash -i retro-cloud-setup/dev/list-home.sh'
    #   # when: always

    #   # name: Print VM ~/ directory listing
    #   - docker exec "$CONTAINER_NAME" /bin/bash -c 'bash -i ssh-vm.sh "bash -i retro-cloud-setup/dev/list-home.sh"'
    #   # when: always

    #   # name: Print Azure File Share directory listing
    #   - docker exec "$CONTAINER_NAME" /bin/bash -c 'bash -i -c \'pwsh -executionpolicy bypass -File "./retro-cloud-setup/dev/list-az-share.ps1"\''
    #   # when: always

    #   # name: Print VM Skyscraper config
    #   - docker exec "$CONTAINER_NAME" /bin/bash -c 'bash -i ssh-vm.sh "cat ~/.skyscraper/config.ini"'
    #   # when: always

    # # - stage: "Teardown Azure resources"
    # # This must weirdly not have a dash, otherwise an empty job is created
    #   # script:

    #   # name: Teardown Azure resources
    #   - docker exec "$CONTAINER_NAME" /bin/bash -c "cd retro-cloud-setup && bash teardown.sh '$CONTAINER_NAME'"
    #   # when: always

      name: "scriptValidation"
