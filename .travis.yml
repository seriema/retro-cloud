version: ~> 1.0 # Opt in to beta Build Config Validation https://docs.travis-ci.com/user/build-config-validation#beta-opt-in
language: shell # "Setting the language key to bash, sh or shell is equivalent to language: minimal." (https://docs.travis-ci.com/user/languages/minimal-and-generic/#aliases)
os: linux
dist: xenial

services:
- docker

env:
  global:
  - CONTAINER_NAME="Build-$TRAVIS_BUILD_NUMBER"

#
# I would prefer to have bashValidation, imageValidation, and scriptValidation running in parallel
# as they are not blocking and builds take long enough, but I haven't found a good way in Travis
# that also is visually easy to follow in the web interface. Having everything regarding
# scriptValidation in one job hides every step inside a giant console log which is impossible to
# track down what step went wrong.
#

# This is in global context and runs for every stage that doesn't override it.
before_install:
# Create .env
- echo "AZURE_TENANT_ID=$AZURE_TENANT_ID" | tee -a .env
- echo "AZURE_SERVICE_PRINCIPAL_USER=$AZURE_SERVICE_PRINCIPAL_USER" | tee -a .env
- echo "AZURE_SERVICE_PRINCIPAL_SECRET=$AZURE_SERVICE_PRINCIPAL_SECRET" | tee -a .env
- echo "SCREENSCRAPER_USER=$SCREENSCRAPER_USER" | tee -a .env
- echo "SCREENSCRAPER_KEY=$SCREENSCRAPER_KEY" | tee -a .env

# I won't be stopping the container. I need to learn more about Travis to know when it would be a
# good time (after everything is run, even if steps failed), but it also adds time to my build.
# Seems pointless as Travis will shut down the VM that's running the container anyway.

jobs:
  include:
  #############################################################################
    - stage: "Workflows"
    # Workflow: bashValidation
    # This must weirdly not have a dash, otherwise an empty job is created
      script:
      - ./lint.sh
      name: "bashValidation"

    # Workflow: imageValidation
    - script:
      # Start Docker
      # Start validation
      - ./docker/test.sh 'latest-amd64' 'seriema/retro-cloud'
      name: "imageValidation"


  #############################################################################
    # Workflow: scriptValidation
    # This must weirdly not have a dash, otherwise an empty job is created
    - script:
       # Start Docker
      - travis_fold:start:docker_start
      - |
        docker pull seriema/retro-cloud:latest-amd64 \
          && docker container create --cap-add SYS_ADMIN --device /dev/fuse --env-file .env --interactive --rm --tty --name "$CONTAINER_NAME" --workdir /home/pi seriema/retro-cloud:latest-amd64 \
          && docker container start "$CONTAINER_NAME"
      - travis_fold:end:docker_start

      # Start validation
      # name: Install Retro-Cloud on RaspberryPi (Setup Azure resources)
      - travis_fold:start:rpi_setup
      - |
        docker exec "$CONTAINER_NAME" /bin/bash -euo pipefail -c " \
          curl -fOL 'https://raw.githubusercontent.com/seriema/retro-cloud/${TRAVIS_COMMIT}/raspberry-pi/download-and-run.sh' \
          && bash download-and-run.sh $TRAVIS_COMMIT $CONTAINER_NAME \
          && rm download-and-run.sh"
      - travis_fold:end:rpi_setup


      # name: Install Retro-Cloud on VM
      - travis_fold:start:vm_setup
      - |
        docker exec "$CONTAINER_NAME" /bin/bash -c "bash -i setup-vm.sh $TRAVIS_COMMIT"
      - travis_fold:end:vm_setup

      # ame: Copy a freeware ROM to VM
      - travis_fold:start:copy_rom
      - |
        docker exec "$CONTAINER_NAME" /bin/bash -c 'bash -i ssh-vm.sh "bash -i retro-cloud-setup/dev/test-copy-rom.sh"'
      - travis_fold:end:copy_rom


      # name: Add Screenscraper.fr credentials to VM
      - travis_fold:start:screenscraper
      - |
        docker exec "$CONTAINER_NAME" /bin/bash -c "./add-scraper-credential.sh screenscraper '$SCREENSCRAPER_USER' '$SCREENSCRAPER_KEY'"
      - travis_fold:end:screenscraper

      # name: Run scraper on VM
      - travis_fold:start:run_scraper
      - |
        docker exec "$CONTAINER_NAME" /bin/bash -c 'bash -i run-scraper.sh'
      - travis_fold:end:run_scraper

      # name: Run all tests
      - travis_fold:start:test
      - |
        docker exec "$CONTAINER_NAME" /bin/bash -c 'retro-cloud-setup/dev/run-tests.sh'
      - travis_fold:end:test

      after_script:
      # name: Print all environments
      - travis_fold:start:print
      - |
        docker exec "$CONTAINER_NAME" /bin/bash -c 'bash -i retro-cloud-setup/dev/print-all.sh'
      - travis_fold:end:print
      # when: always

    # - stage: "Teardown Azure resources"
    # This must weirdly not have a dash, otherwise an empty job is created
      # script:

      # name: Teardown Azure resources
      - travis_fold:start:az_teardown
      - |
        docker exec "$CONTAINER_NAME" /bin/bash -c "cd retro-cloud-setup && bash teardown.sh '$CONTAINER_NAME'"
      - travis_fold:end:az_teardown
      # when: always

      name: "scriptValidation"
